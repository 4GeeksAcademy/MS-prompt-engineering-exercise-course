{"telemetry_id":"lgmle0kl5a0wfeg7","slug":"prompt-engineering-for-beginners","agent":"vscode","tutorial_started_at":1718809424147,"steps":[{"slug":"00-welcome","position":0,"files":[{"path":"exercises\\00-welcome/README.es.md","name":"README.es.md","hidden":true},{"path":"exercises\\00-welcome/README.md","name":"README.md","hidden":true},{"path":"exercises\\00-welcome/__pycache__","name":"__pycache__","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":false},{"slug":"00.1-brieftly-understand-generative-ai","position":1,"files":[{"path":"exercises\\00.1-brieftly-understand-generative-ai/README.es.md","name":"README.es.md","hidden":true},{"path":"exercises\\00.1-brieftly-understand-generative-ai/README.md","name":"README.md","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":false,"opened_at":1718830892803,"completed_at":1718830893251},{"slug":"01-what-is-prompting","position":2,"files":[{"path":"exercises\\01-what-is-prompting/README.es.md","name":"README.es.md","hidden":true},{"path":"exercises\\01-what-is-prompting/README.md","name":"README.md","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":false,"opened_at":1718830893251,"completed_at":1718830893718},{"slug":"01.1-obtain-api-key","position":3,"files":[{"path":"exercises\\01.1-obtain-api-key/app.py","name":"app.py","hidden":false},{"path":"exercises\\01.1-obtain-api-key/README.es.md","name":"README.es.md","hidden":true},{"path":"exercises\\01.1-obtain-api-key/README.md","name":"README.md","hidden":true},{"path":"exercises\\01.1-obtain-api-key/test.py","name":"test.py","hidden":true},{"path":"exercises\\01.1-obtain-api-key/__pycache__","name":"__pycache__","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true,"opened_at":1718830893718},{"slug":"02-write-your-first-prompt-","position":4,"files":[{"path":"exercises\\02-write-your-first-prompt-/prompt.txt","name":"prompt.txt","hidden":false},{"path":"exercises\\02-write-your-first-prompt-/README.es.md","name":"README.es.md","hidden":true},{"path":"exercises\\02-write-your-first-prompt-/README.md","name":"README.md","hidden":true},{"path":"exercises\\02-write-your-first-prompt-/test.py","name":"test.py","hidden":true},{"path":"exercises\\02-write-your-first-prompt-/__pycache__","name":"__pycache__","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1718830919382,"ended_at":1718830924948,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtDQpwbGF0Zm9ybSB3aW4zMiAtLSBQeXRob24gMy4xMS4zLCBweXRlc3QtOC4yLjIsIHBsdWdneS0xLjUuMA0Kcm9vdGRpcjogQzpcVXNlcnNcTEVHSU9OXFByb2plY3RzXGpvYnNcNGdlZWtzXHR1dG9yaWFsc1xwcm9tcHQtZW5nDQpwbHVnaW5zOiBhbnlpby00LjQuMCwgdGVzdGRveC0zLjEuMA0KY29sbGVjdGVkIDMgaXRlbXMNCg0KZXhlcmNpc2VzXDAyLXdyaXRlLXlvdXItZmlyc3QtcHJvbXB0LVx0ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgWzEwMCVdG1swbQ0KDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQobWzMxbRtbMW1fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcm9tcHQgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQ0KDQogICAgQHB5dGVzdC5tYXJrLml0KCJUaGUgcHJvbXB0IE1VU1QgaW5jbHVkZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hhcmFjdGVycywgdGhlIHNjZW5lLCBhbmQgYXQgbGVhc3Qgb25lIG1vcmUgZWxlbWVudC4iKQ0KICAgIGRlZiB0ZXN0X3Byb21wdCgpOg0KICAgICAgICBQUk9NUFQgPSBvcGVuKHBhdGgsICJyIikucmVhZCgpDQogICAgICAgIHJlc3VsdCA9IGNyZWF0ZV9wcm9tcHQoZ2V0X3Rlc3Rlcl9wcm9tcHQoUFJPTVBUX1JFUVVJUkVNRU5UUyksIFBST01QVCkNCiAgICANCiAgICAgICAgc2F2ZV9yZXBvcnQocmVzdWx0LCBjdXJyZW50X2RpcikNCiAgICAgICAgIyBpZiAiQkFEX1BST01QVCIgaW4gcmVzdWx0Og0KICAgICAgICAjIGVsc2U6DQogICAgICAgICMgICAgIGRlbGV0ZV9yZXBvcnQoY3VycmVudF9kaXIpDQogICAgDQo+ICAgICAgIGFzc2VydCAiR09PRF9QUk9NUFQiIGluIHJlc3VsdA0KXHgxYlsxbVx4MWJbMzFtRSAgICAgICBhc3NlcnQgJ0dPT0RfUFJPTVBUJyBpbiAiIyBCQURfUFJPTVBUIFxVMDAwMWY2YTlcXG5cXG5Zb3VyIGZlZWRiYWNrIHN1bW1hcnlcXG5cXG58IFJlcXVpcmVtZW50IHwgQ29ycmVjdG5lc3MgfCBFeHBsYW5hdGlvbiB8XFxufCAtLS0gfCAtLS0gfCAtLS0gfFxcbnwgSW5mb3JtLi4ucHJlbmV1ci4gRm9yIGV4YW1wbGUsIHlvdSBjb3VsZCBzcGVjaWZ5IHRoZSBlbnRyZXByZW5ldXIncyBnb2FsLCB0aGUgaW5kdXN0cnkgdGhleSdyZSBpbiwgb3IgdGhlIGNoYWxsZW5nZXMgdGhleSBmYWNlLiJceDFiWzBtDQoNChtbMW0bWzMxbWV4ZXJjaXNlc1wwMi13cml0ZS15b3VyLWZpcnN0LXByb21wdC1cdGVzdC5weRtbMG06NDg6IEFzc2VydGlvbkVycm9yDQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQ0KXHgxYlszMW1GQUlMRURceDFiWzBtIGV4ZXJjaXNlcy8wMi13cml0ZS15b3VyLWZpcnN0LXByb21wdC0vdGVzdC5weTo6XHgxYlsxbXRlc3RfcHJvbXB0XHgxYlswbSAtIGFzc2VydCAnR09PRF9QUk9NUFQnIGluICIjIEJBRF9QUk9NUFQgXFUwMDAxZjZhOVxcblxcbllvdXIgZmVlZGJhY2sgc3VtbWFyeVxcblxcbnwgUmVxdS4uLg0KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiA0LjQ2cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09G1swbQ0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtDQpwbGF0Zm9ybSB3aW4zMiAtLSBQeXRob24gMy4xMS4zLCBweXRlc3QtOC4yLjIsIHBsdWdneS0xLjUuMA0Kcm9vdGRpcjogQzpcVXNlcnNcTEVHSU9OXFByb2plY3RzXGpvYnNcNGdlZWtzXHR1dG9yaWFsc1xwcm9tcHQtZW5nDQpwbHVnaW5zOiBhbnlpby00LjQuMCwgdGVzdGRveC0zLjEuMA0KY29sbGVjdGVkIDMgaXRlbXMNCg0KZXhlcmNpc2VzXDAyLXdyaXRlLXlvdXItZmlyc3QtcHJvbXB0LVx0ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgWzEwMCVdG1swbQ0KDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQobWzMxbRtbMW1fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcm9tcHQgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQ0KDQogICAgQHB5dGVzdC5tYXJrLml0KCJUaGUgcHJvbXB0IE1VU1QgaW5jbHVkZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hhcmFjdGVycywgdGhlIHNjZW5lLCBhbmQgYXQgbGVhc3Qgb25lIG1vcmUgZWxlbWVudC4iKQ0KICAgIGRlZiB0ZXN0X3Byb21wdCgpOg0KICAgICAgICBQUk9NUFQgPSBvcGVuKHBhdGgsICJyIikucmVhZCgpDQogICAgICAgIHJlc3VsdCA9IGNyZWF0ZV9wcm9tcHQoZ2V0X3Rlc3Rlcl9wcm9tcHQoUFJPTVBUX1JFUVVJUkVNRU5UUyksIFBST01QVCkNCiAgICANCiAgICAgICAgc2F2ZV9yZXBvcnQocmVzdWx0LCBjdXJyZW50X2RpcikNCiAgICAgICAgIyBpZiAiQkFEX1BST01QVCIgaW4gcmVzdWx0Og0KICAgICAgICAjIGVsc2U6DQogICAgICAgICMgICAgIGRlbGV0ZV9yZXBvcnQoY3VycmVudF9kaXIpDQogICAgDQo+ICAgICAgIGFzc2VydCAiR09PRF9QUk9NUFQiIGluIHJlc3VsdA0KXHgxYlsxbVx4MWJbMzFtRSAgICAgICBhc3NlcnQgJ0dPT0RfUFJPTVBUJyBpbiAiIyBCQURfUFJPTVBUIFxVMDAwMWY2YTlcXG5cXG5Zb3VyIGZlZWRiYWNrIHN1bW1hcnlcXG5cXG58IFJlcXVpcmVtZW50IHwgQ29ycmVjdG5lc3MgfCBFeHBsYW5hdGlvbiB8XFxufCAtLS0gfCAtLS0gfCAtLS0gfFxcbnwgSW5mb3JtLi4ucHJlbmV1ci4gRm9yIGV4YW1wbGUsIHlvdSBjb3VsZCBzcGVjaWZ5IHRoZSBlbnRyZXByZW5ldXIncyBnb2FsLCB0aGUgaW5kdXN0cnkgdGhleSdyZSBpbiwgb3IgdGhlIGNoYWxsZW5nZXMgdGhleSBmYWNlLiJceDFiWzBtDQoNChtbMW0bWzMxbWV4ZXJjaXNlc1wwMi13cml0ZS15b3VyLWZpcnN0LXByb21wdC1cdGVzdC5weRtbMG06NDg6IEFzc2VydGlvbkVycm9yDQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQ0KXHgxYlszMW1GQUlMRURceDFiWzBtIGV4ZXJjaXNlcy8wMi13cml0ZS15b3VyLWZpcnN0LXByb21wdC0vdGVzdC5weTo6XHgxYlsxbXRlc3RfcHJvbXB0XHgxYlswbSAtIGFzc2VydCAnR09PRF9QUk9NUFQnIGluICIjIEJBRF9QUk9NUFQgXFUwMDAxZjZhOVxcblxcbllvdXIgZmVlZGJhY2sgc3VtbWFyeVxcblxcbnwgUmVxdS4uLg0KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiA0LjQ2cxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09G1swbQ0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBwcm9tcHQgTVVTVCBpbmNsdWRlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjaGFyYWN0ZXJzLCB0aGUgc2NlbmUsIGFuZCBhdCBsZWFzdCBvbmUgbW9yZSBlbGVtZW50LhtbMzltIAoK","exit_code":1},{"starting_at":1718830934167,"ended_at":1718830937257,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtDQpwbGF0Zm9ybSB3aW4zMiAtLSBQeXRob24gMy4xMS4zLCBweXRlc3QtOC4yLjIsIHBsdWdneS0xLjUuMA0Kcm9vdGRpcjogQzpcVXNlcnNcTEVHSU9OXFByb2plY3RzXGpvYnNcNGdlZWtzXHR1dG9yaWFsc1xwcm9tcHQtZW5nDQpwbHVnaW5zOiBhbnlpby00LjQuMCwgdGVzdGRveC0zLjEuMA0KY29sbGVjdGVkIDMgaXRlbXMNCg0KZXhlcmNpc2VzXDAyLXdyaXRlLXlvdXItZmlyc3QtcHJvbXB0LVx0ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgWzEwMCVdG1swbQ0KDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQobWzMxbRtbMW1fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcm9tcHQgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQ0KDQogICAgQHB5dGVzdC5tYXJrLml0KCJUaGUgcHJvbXB0IE1VU1QgaW5jbHVkZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hhcmFjdGVycywgdGhlIHNjZW5lLCBhbmQgYXQgbGVhc3Qgb25lIG1vcmUgZWxlbWVudC4iKQ0KICAgIGRlZiB0ZXN0X3Byb21wdCgpOg0KICAgICAgICBQUk9NUFQgPSBvcGVuKHBhdGgsICJyIikucmVhZCgpDQogICAgICAgIHJlc3VsdCA9IGNyZWF0ZV9wcm9tcHQoZ2V0X3Rlc3Rlcl9wcm9tcHQoUFJPTVBUX1JFUVVJUkVNRU5UUyksIFBST01QVCkNCiAgICANCiAgICAgICAgc2F2ZV9yZXBvcnQocmVzdWx0LCBjdXJyZW50X2RpcikNCiAgICAgICAgIyBpZiAiQkFEX1BST01QVCIgaW4gcmVzdWx0Og0KICAgICAgICAjIGVsc2U6DQogICAgICAgICMgICAgIGRlbGV0ZV9yZXBvcnQoY3VycmVudF9kaXIpDQogICAgDQo+ICAgICAgIGFzc2VydCAiR09PRF9QUk9NUFQiIGluIHJlc3VsdA0KXHgxYlsxbVx4MWJbMzFtRSAgICAgICBhc3NlcnQgJ0dPT0RfUFJPTVBUJyBpbiAiIyBCQURfUFJPTVBUIFxVMDAwMWY2YTlcXG5cXG5Zb3VyIGZlZWRiYWNrIHN1bW1hcnk6XFxuXFxufCBSZXF1aXJlbWVudCB8IENvcnJlY3Q/IHwgRXhwbGFuYXRpb24gfFxcbnwgLS0tIHwgLS0tIHwgLS0tIHxcXG58IENoYXJhY3RlLi4udGlvbmFsIGVsZW1lbnQgdG8gbWFrZSB0aGUgc3RvcnkgbW9yZSBlbmdhZ2luZyAoZS5nLiwgYSBjaGFsbGVuZ2UgdGhleSdyZSBmYWNpbmcgb3IgYSBnb2FsIHRoZXkncmUgdHJ5aW5nIHRvIGFjaGlldmUpLiJceDFiWzBtDQoNChtbMW0bWzMxbWV4ZXJjaXNlc1wwMi13cml0ZS15b3VyLWZpcnN0LXByb21wdC1cdGVzdC5weRtbMG06NDg6IEFzc2VydGlvbkVycm9yDQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQ0KXHgxYlszMW1GQUlMRURceDFiWzBtIGV4ZXJjaXNlcy8wMi13cml0ZS15b3VyLWZpcnN0LXByb21wdC0vdGVzdC5weTo6XHgxYlsxbXRlc3RfcHJvbXB0XHgxYlswbSAtIGFzc2VydCAnR09PRF9QUk9NUFQnIGluICIjIEJBRF9QUk9NUFQgXFUwMDAxZjZhOVxcblxcbllvdXIgZmVlZGJhY2sgc3VtbWFyeTpcXG5cXG58IFJlcS4uLg0KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAyLjIzcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09G1swbQ0K","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtDQpwbGF0Zm9ybSB3aW4zMiAtLSBQeXRob24gMy4xMS4zLCBweXRlc3QtOC4yLjIsIHBsdWdneS0xLjUuMA0Kcm9vdGRpcjogQzpcVXNlcnNcTEVHSU9OXFByb2plY3RzXGpvYnNcNGdlZWtzXHR1dG9yaWFsc1xwcm9tcHQtZW5nDQpwbHVnaW5zOiBhbnlpby00LjQuMCwgdGVzdGRveC0zLjEuMA0KY29sbGVjdGVkIDMgaXRlbXMNCg0KZXhlcmNpc2VzXDAyLXdyaXRlLXlvdXItZmlyc3QtcHJvbXB0LVx0ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgWzEwMCVdG1swbQ0KDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQobWzMxbRtbMW1fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcm9tcHQgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQ0KDQogICAgQHB5dGVzdC5tYXJrLml0KCJUaGUgcHJvbXB0IE1VU1QgaW5jbHVkZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hhcmFjdGVycywgdGhlIHNjZW5lLCBhbmQgYXQgbGVhc3Qgb25lIG1vcmUgZWxlbWVudC4iKQ0KICAgIGRlZiB0ZXN0X3Byb21wdCgpOg0KICAgICAgICBQUk9NUFQgPSBvcGVuKHBhdGgsICJyIikucmVhZCgpDQogICAgICAgIHJlc3VsdCA9IGNyZWF0ZV9wcm9tcHQoZ2V0X3Rlc3Rlcl9wcm9tcHQoUFJPTVBUX1JFUVVJUkVNRU5UUyksIFBST01QVCkNCiAgICANCiAgICAgICAgc2F2ZV9yZXBvcnQocmVzdWx0LCBjdXJyZW50X2RpcikNCiAgICAgICAgIyBpZiAiQkFEX1BST01QVCIgaW4gcmVzdWx0Og0KICAgICAgICAjIGVsc2U6DQogICAgICAgICMgICAgIGRlbGV0ZV9yZXBvcnQoY3VycmVudF9kaXIpDQogICAgDQo+ICAgICAgIGFzc2VydCAiR09PRF9QUk9NUFQiIGluIHJlc3VsdA0KXHgxYlsxbVx4MWJbMzFtRSAgICAgICBhc3NlcnQgJ0dPT0RfUFJPTVBUJyBpbiAiIyBCQURfUFJPTVBUIFxVMDAwMWY2YTlcXG5cXG5Zb3VyIGZlZWRiYWNrIHN1bW1hcnk6XFxuXFxufCBSZXF1aXJlbWVudCB8IENvcnJlY3Q/IHwgRXhwbGFuYXRpb24gfFxcbnwgLS0tIHwgLS0tIHwgLS0tIHxcXG58IENoYXJhY3RlLi4udGlvbmFsIGVsZW1lbnQgdG8gbWFrZSB0aGUgc3RvcnkgbW9yZSBlbmdhZ2luZyAoZS5nLiwgYSBjaGFsbGVuZ2UgdGhleSdyZSBmYWNpbmcgb3IgYSBnb2FsIHRoZXkncmUgdHJ5aW5nIHRvIGFjaGlldmUpLiJceDFiWzBtDQoNChtbMW0bWzMxbWV4ZXJjaXNlc1wwMi13cml0ZS15b3VyLWZpcnN0LXByb21wdC1cdGVzdC5weRtbMG06NDg6IEFzc2VydGlvbkVycm9yDQobWzM2bRtbMW09PT09PT09PT09PT09PT09PT09PT09PT09PT0gc2hvcnQgdGVzdCBzdW1tYXJ5IGluZm8gPT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQ0KXHgxYlszMW1GQUlMRURceDFiWzBtIGV4ZXJjaXNlcy8wMi13cml0ZS15b3VyLWZpcnN0LXByb21wdC0vdGVzdC5weTo6XHgxYlsxbXRlc3RfcHJvbXB0XHgxYlswbSAtIGFzc2VydCAnR09PRF9QUk9NUFQnIGluICIjIEJBRF9QUk9NUFQgXFUwMDAxZjZhOVxcblxcbllvdXIgZmVlZGJhY2sgc3VtbWFyeTpcXG5cXG58IFJlcS4uLg0KG1szMW09PT09PT09PT09PT09PT09PT09PT09PT09IBtbMzFtG1sxbTEgZmFpbGVkG1swbSwgG1szMm0yIHBhc3NlZBtbMG0bWzMxbSBpbiAyLjIzcxtbMG0bWzMxbSA9PT09PT09PT09PT09PT09PT09PT09PT09G1swbQ0KLAoKICAgCiAgICAgICAgICAbWzMxbVlvdXIgY29kZSBtdXN0IHRvIGNvbXBseSB3aXRoIHRoZSBmb2xsb3dpbmcgdGVzdHM6G1szOW0gCgogICAgIBtbMzFtG1sxbXggKGZhaWwpG1syMm0bWzM5bSAwLiAbWzM3bVRoZSBwcm9tcHQgTVVTVCBpbmNsdWRlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjaGFyYWN0ZXJzLCB0aGUgc2NlbmUsIGFuZCBhdCBsZWFzdCBvbmUgbW9yZSBlbGVtZW50LhtbMzltIAoK","exit_code":1},{"starting_at":1718831095130,"ended_at":1718831105657,"stdout":"","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtDQpwbGF0Zm9ybSB3aW4zMiAtLSBQeXRob24gMy4xMS4zLCBweXRlc3QtOC4yLjIsIHBsdWdneS0xLjUuMA0Kcm9vdGRpcjogQzpcVXNlcnNcTEVHSU9OXFByb2plY3RzXGpvYnNcNGdlZWtzXHR1dG9yaWFsc1xwcm9tcHQtZW5nDQpwbHVnaW5zOiBhbnlpby00LjQuMCwgdGVzdGRveC0zLjEuMA0KY29sbGVjdGVkIDMgaXRlbXMNCg0KZXhlcmNpc2VzXDAyLXdyaXRlLXlvdXItZmlyc3QtcHJvbXB0LVx0ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgWzEwMCVdG1swbQ0KDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQobWzMxbRtbMW1fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcm9tcHQgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQ0KDQogICAgQGNvbnRleHRsaWIuY29udGV4dG1hbmFnZXINCiAgICBkZWYgbWFwX2h0dHBjb3JlX2V4Y2VwdGlvbnMoKSAtPiB0eXBpbmcuSXRlcmF0b3JbTm9uZV06DQogICAgICAgIHRyeToNCj4gICAgICAgICAgIHlpZWxkDQoNChtbMW0bWzMxbS4uXC4uXC4uXC4uXC4uXEFwcERhdGFcTG9jYWxcUHJvZ3JhbXNcUHl0aG9uXFB5dGhvbjMxMVxMaWJcc2l0ZS1wYWNrYWdlc1xodHRweFxfdHJhbnNwb3J0c1xkZWZhdWx0LnB5G1swbTo2OTogDQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfDQobWzFtG1szMW0uLlwuLlwuLlwuLlwuLlxBcHBEYXRhXExvY2FsXFByb2dyYW1zXFB5dGhvblxQeXRob24zMTFcTGliXHNpdGUtcGFja2FnZXNcaHR0cHhcX3RyYW5zcG9ydHNcZGVmYXVsdC5weRtbMG06MjMzOiBpbiBoYW5kbGVfcmVxdWVzdA0KICAgIHJlc3AgPSBzZWxmLl9wb29sLmhhbmRsZV9yZXF1ZXN0KHJlcSkNChtbMW0bWzMxbS4uXC4uXC4uXC4uXC4uXEFwcERhdGFcTG9jYWxcUHJvZ3JhbXNcUHl0aG9uXFB5dGhvbjMxMVxMaWJcc2l0ZS1wYWNrYWdlc1xodHRwY29yZVxfc3luY1xjb25uZWN0aW9uX3Bvb2wucHkbWzBtOjIxNjogaW4gaGFuZGxlX3JlcXVlc3QNCiAgICByYWlzZSBleGMgZnJvbSBOb25lDQobWzFtG1szMW0uLlwuLlwuLlwuLlwuLlxBcHBEYXRhXExvY2FsXFByb2dyYW1zXFB5dGhvblxQeXRob24zMTFcTGliXHNpdGUtcGFja2FnZXNcaHR0cGNvcmVcX3N5bmNcY29ubmVjdGlvbl9wb29sLnB5G1swbToxOTY6IGluIGhhbmRsZV9yZXF1ZXN0DQogICAgcmVzcG9uc2UgPSBjb25uZWN0aW9uLmhhbmRsZV9yZXF1ZXN0KA0KG1sxbRtbMzFtLi5cLi5cLi5cLi5cLi5cQXBwRGF0YVxMb2NhbFxQcm9ncmFtc1xQeXRob25cUHl0aG9uMzExXExpYlxzaXRlLXBhY2thZ2VzXGh0dHBjb3JlXF9zeW5jXGNvbm5lY3Rpb24ucHkbWzBtOjk5OiBpbiBoYW5kbGVfcmVxdWVzdA0KICAgIHJhaXNlIGV4Yw0KG1sxbRtbMzFtLi5cLi5cLi5cLi5cLi5cQXBwRGF0YVxMb2NhbFxQcm9ncmFtc1xQeXRob25cUHl0aG9uMzExXExpYlxzaXRlLXBhY2thZ2VzXGh0dHBjb3JlXF9zeW5jXGNvbm5lY3Rpb24ucHkbWzBtOjc2OiBpbiBoYW5kbGVfcmVxdWVzdA0KICAgIHN0cmVhbSA9IHNlbGYuX2Nvbm5lY3QocmVxdWVzdCkNChtbMW0bWzMxbS4uXC4uXC4uXC4uXC4uXEFwcERhdGFcTG9jYWxcUHJvZ3JhbXNcUHl0aG9uXFB5dGhvbjMxMVxMaWJcc2l0ZS1wYWNrYWdlc1xodHRwY29yZVxfc3luY1xjb25uZWN0aW9uLnB5G1swbToxMjI6IGluIF9jb25uZWN0DQogICAgc3RyZWFtID0gc2VsZi5fbmV0d29ya19iYWNrZW5kLmNvbm5lY3RfdGNwKCoqa3dhcmdzKQ0KG1sxbRtbMzFtLi5cLi5cLi5cLi5cLi5cQXBwRGF0YVxMb2NhbFxQcm9ncmFtc1xQeXRob25cUHl0aG9uMzExXExpYlxzaXRlLXBhY2thZ2VzXGh0dHBjb3JlXF9iYWNrZW5kc1xzeW5jLnB5G1swbToyMDU6IGluIGNvbm5lY3RfdGNwDQogICAgd2l0aCBtYXBfZXhjZXB0aW9ucyhleGNfbWFwKToNChtbMW0bWzMxbS4uXC4uXC4uXC4uXC4uXEFwcERhdGFcTG9jYWxcUHJvZ3JhbXNcUHl0aG9uXFB5dGhvbjMxMVxMaWJcY29udGV4dGxpYi5weRtbMG06MTU1OiBpbiBfX2V4aXRfXw0KICAgIHNlbGYuZ2VuLnRocm93KHR5cCwgdmFsdWUsIHRyYWNlYmFjaykNCl8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8NCg0KbWFwID0gezxjbGFzcyAnVGltZW91dEVycm9yJz46IDxjbGFzcyAnaHR0cGNvcmUuQ29ubmVjdFRpbWVvdXQnPiwgPGNsYXNzICdPU0Vycm9yJz46IDxjbGFzcyAnaHR0cGNvcmUuQ29ubmVjdEVycm9yJz59DQoNCiAgICBAY29udGV4dGxpYi5jb250ZXh0bWFuYWdlcg0KICAgIGRlZiBtYXBfZXhjZXB0aW9ucyhtYXA6IEV4Y2VwdGlvbk1hcHBpbmcpIC0+IEl0ZXJhdG9yW05vbmVdOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICB5aWVsZA0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGV4YzogICMgbm9xYTogUElFNzg2DQogICAgICAgICAgICBmb3IgZnJvbV9leGMsIHRvX2V4YyBpbiBtYXAuaXRlbXMoKToNCiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKGV4YywgZnJvbV9leGMpOg0KPiAgICAgICAgICAgICAgICAgICByYWlzZSB0b19leGMoZXhjKSBmcm9tIGV4Yw0KG1sxbRtbMzFtRSAgICAgICAgICAgICAgICAgICBodHRwY29yZS5Db25uZWN0RXJyb3I6IFtFcnJubyAxMTAwMV0gZ2V0YWRkcmluZm8gZmFpbGVkG1swbQ0KDQobWzFtG1szMW0uLlwuLlwuLlwuLlwuLlxBcHBEYXRhXExvY2FsXFByb2dyYW1zXFB5dGhvblxQeXRob24zMTFcTGliXHNpdGUtcGFja2FnZXNcaHR0cGNvcmVcX2V4Y2VwdGlvbnMucHkbWzBtOjE0OiBDb25uZWN0RXJyb3INCg0KG1szM21UaGUgYWJvdmUgZXhjZXB0aW9uIHdhcyB0aGUgZGlyZWN0IGNhdXNlIG9mIHRoZSBmb2xsb3dpbmcgZXhjZXB0aW9uOhtbMG0NCg0Kc2VsZiA9IDxncm9xLkdyb3Egb2JqZWN0IGF0IDB4MDAwMDAyMkNGRTIzMTE5MD4NCg0KICAgIGRlZiBfcmVxdWVzdCgNCiAgICAgICAgc2VsZiwNCiAgICAgICAgKiwNCiAgICAgICAgY2FzdF90bzogVHlwZVtSZXNwb25zZVRdLA0KICAgICAgICBvcHRpb25zOiBGaW5hbFJlcXVlc3RPcHRpb25zLA0KICAgICAgICByZW1haW5pbmdfcmV0cmllczogaW50IHwgTm9uZSwNCiAgICAgICAgc3RyZWFtOiBib29sLA0KICAgICAgICBzdHJlYW1fY2xzOiB0eXBlW19TdHJlYW1UXSB8IE5vbmUsDQogICAgKSAtPiBSZXNwb25zZVQgfCBfU3RyZWFtVDoNCiAgICAgICAgY2FzdF90byA9IHNlbGYuX21heWJlX292ZXJyaWRlX2Nhc3RfdG8oY2FzdF90bywgb3B0aW9ucykNCiAgICAgICAgc2VsZi5fcHJlcGFyZV9vcHRpb25zKG9wdGlvbnMpDQogICAgDQogICAgICAgIHJldHJpZXMgPSBzZWxmLl9yZW1haW5pbmdfcmV0cmllcyhyZW1haW5pbmdfcmV0cmllcywgb3B0aW9ucykNCiAgICAgICAgcmVxdWVzdCA9IHNlbGYuX2J1aWxkX3JlcXVlc3Qob3B0aW9ucykNCiAgICAgICAgc2VsZi5fcHJlcGFyZV9yZXF1ZXN0KHJlcXVlc3QpDQogICAgDQogICAgICAgIGt3YXJnczogSHR0cHhTZW5kQXJncyA9IHt9DQogICAgICAgIGlmIHNlbGYuY3VzdG9tX2F1dGggaXMgbm90IE5vbmU6DQogICAgICAgICAgICBrd2FyZ3NbImF1dGgiXSA9IHNlbGYuY3VzdG9tX2F1dGgNCiAgICANCiAgICAgICAgbG9nLmRlYnVnKCJTZW5kaW5nIEhUVFAgUmVxdWVzdDogJXMgJXMiLCByZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwpDQogICAgDQogICAgICAgIHRyeToNCj4gICAgICAgICAgIHJlc3BvbnNlID0gc2VsZi5fY2xpZW50LnNlbmQoDQogICAgICAgICAgICAgICAgcmVxdWVzdCwNCiAgICAgICAgICAgICAgICBzdHJlYW09c3RyZWFtIG9yIHNlbGYuX3Nob3VsZF9zdHJlYW1fcmVzcG9uc2VfYm9keShyZXF1ZXN0PXJlcXVlc3QpLA0KICAgICAgICAgICAgICAgICoqa3dhcmdzLA0KICAgICAgICAgICAgKQ0KDQobWzFtG1szMW0uLlwuLlwuLlwuLlwuLlxBcHBEYXRhXExvY2FsXFByb2dyYW1zXFB5dGhvblxQeXRob24zMTFcTGliXHNpdGUtcGFja2FnZXNcZ3JvcVxfYmFzZV9jbGllbnQucHkbWzBtOjk1MTogDQpfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfDQobWzFtG1szMW0uLlwuLlwuLlwuLlwuLlxBcHBEYXRhXExvY2FsXFByb2dyYW1zXFB5dGhvblxQeXRob24zMTFcTGliXHNpdGUtcGFja2FnZXNcaHR0cHhcX2NsaWVudC5weRtbMG06OTE0OiBpbiBzZW5kDQogICAgcmVzcG9uc2UgPSBzZWxmLl9zZW5kX2hhbmRsaW5nX2F1dGgoDQobWzFtG1szMW0uLlwuLlwuLlwuLlwuLlxBcHBEYXRhXExvY2FsXFByb2dyYW1zXFB5dGhvblxQeXRob24zMTFcTGliXHNpdGUtcGFja2FnZXNcaHR0cHhcX2NsaWVudC5weRtbMG06OTQyOiBpbiBfc2VuZF9oYW5kbGluZ19hdXRoDQogICAgcmVzcG9uc2UgPSBzZWxmLl9zZW5kX2hhbmRsaW5nX3JlZGlyZWN0cygNChtbMW0bWzMxbS4uXC4uXC4uXC4uXC4uXEFwcERhdGFcTG9jYWxcUHJvZ3JhbXNcUHl0aG9uXFB5dGhvbjMxMVxMaWJcc2l0ZS1wYWNrYWdlc1xodHRweFxfY2xpZW50LnB5G1swbTo5Nzk6IGluIF9zZW5kX2hhbmRsaW5nX3JlZGlyZWN0cw0KICAgIHJlc3BvbnNlID0gc2VsZi5fc2VuZF9zaW5nbGVfcmVxdWVzdChyZXF1ZXN0KQ0KG1sxbRtbMzFtLi5cLi5cLi5cLi5cLi5cQXBwRGF0YVxMb2NhbFxQcm9ncmFtc1xQeXRob25cUHl0aG9uMzExXExpYlxzaXRlLXBhY2thZ2VzXGh0dHB4XF9jbGllbnQucHkbWzBtOjEwMTU6IGluIF9zZW5kX3NpbmdsZV9yZXF1ZXN0DQogICAgcmVzcG9uc2UgPSB0cmFuc3BvcnQuaGFuZGxlX3JlcXVlc3QocmVxdWVzdCkNChtbMW0bWzMxbS4uXC4uXC4uXC4uXC4uXEFwcERhdGFcTG9jYWxcUHJvZ3JhbXNcUHl0aG9uXFB5dGhvbjMxMVxMaWJcc2l0ZS1wYWNrYWdlc1xodHRweFxfdHJhbnNwb3J0c1xkZWZhdWx0LnB5G1swbToyMzI6IGluIGhhbmRsZV9yZXF1ZXN0DQogICAgd2l0aCBtYXBfaHR0cGNvcmVfZXhjZXB0aW9ucygpOg0KG1sxbRtbMzFtLi5cLi5cLi5cLi5cLi5cQXBwRGF0YVxMb2NhbFxQcm9ncmFtc1xQeXRob25cUHl0aG9uMzExXExpYlxjb250ZXh0bGliLnB5G1swbToxNTU6IGluIF9fZXhpdF9fDQogICAgc2VsZi5nZW4udGhyb3codHlwLCB2YWx1ZSwgdHJhY2ViYWNrKQ0KXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXw0KDQogICAgQGNvbnRleHRsaWIuY29udGV4dG1hbmFnZXINCiAgICBkZWYgbWFwX2h0dHBjb3JlX2V4Y2VwdGlvbnMoKSAtPiB0eXBpbmcuSXRlcmF0b3JbTm9uZV06DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHlpZWxkDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZXhjOg0KICAgICAgICAgICAgbWFwcGVkX2V4YyA9IE5vbmUNCiAgICANCiAgICAgICAgICAgIGZvciBmcm9tX2V4YywgdG9fZXhjIGluIEhUVFBDT1JFX0VYQ19NQVAuaXRlbXMoKToNCiAgICAgICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShleGMsIGZyb21fZXhjKToNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICAjIFdlIHdhbnQgdG8gbWFwIHRvIHRoZSBtb3N0IHNwZWNpZmljIGV4Y2VwdGlvbiB3ZSBjYW4gZmluZC4NCiAgICAgICAgICAgICAgICAjIEVnIGlmIGBleGNgIGlzIGFuIGBodHRwY29yZS5SZWFkVGltZW91dGAsIHdlIHdhbnQgdG8gbWFwIHRvDQogICAgICAgICAgICAgICAgIyBgaHR0cHguUmVhZFRpbWVvdXRgLCBub3QganVzdCBgaHR0cHguVGltZW91dEV4Y2VwdGlvbmAuDQogICAgICAgICAgICAgICAgaWYgbWFwcGVkX2V4YyBpcyBOb25lIG9yIGlzc3ViY2xhc3ModG9fZXhjLCBtYXBwZWRfZXhjKToNCiAgICAgICAgICAgICAgICAgICAgbWFwcGVkX2V4YyA9IHRvX2V4Yw0KICAgIA0KICAgICAgICAgICAgaWYgbWFwcGVkX2V4YyBpcyBOb25lOiAgIyBwcmFnbWE6IG5vIGNvdmVyDQogICAgICAgICAgICAgICAgcmFpc2UNCiAgICANCiAgICAgICAgICAgIG1lc3NhZ2UgPSBzdHIoZXhjKQ0KPiAgICAgICAgICAgcmFpc2UgbWFwcGVkX2V4YyhtZXNzYWdlKSBmcm9tIGV4Yw0KG1sxbRtbMzFtRSAgICAgICAgICAgaHR0cHguQ29ubmVjdEVycm9yOiBbRXJybm8gMTEwMDFdIGdldGFkZHJpbmZvIGZhaWxlZBtbMG0NCg0KG1sxbRtbMzFtLi5cLi5cLi5cLi5cLi5cQXBwRGF0YVxMb2NhbFxQcm9ncmFtc1xQeXRob25cUHl0aG9uMzExXExpYlxzaXRlLXBhY2thZ2VzXGh0dHB4XF90cmFuc3BvcnRzXGRlZmF1bHQucHkbWzBtOjg2OiBDb25uZWN0RXJyb3INCg0KG1szM21UaGUgYWJvdmUgZXhjZXB0aW9uIHdhcyB0aGUgZGlyZWN0IGNhdXNlIG9mIHRoZSBmb2xsb3dpbmcgZXhjZXB0aW9uOhtbMG0NCg0KICAgIEBweXRlc3QubWFyay5pdCgiVGhlIHByb21wdCBNVVNUIGluY2x1ZGUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNoYXJhY3RlcnMsIHRoZSBzY2VuZSwgYW5kIGF0IGxlYXN0IG9uZSBtb3JlIGVsZW1lbnQuIikNCiAgICBkZWYgdGVzdF9wcm9tcHQoKToNCiAgICAgICAgUFJPTVBUID0gb3BlbihwYXRoLCAiciIpLnJlYWQoKQ0KPiAgICAgICByZXN1bHQgPSBjcmVhdGVfcHJvbXB0KGdldF90ZXN0ZXJfcHJvbXB0KFBST01QVF9SRVFVSVJFTUVOVFMpLCBQUk9NUFQpDQoNChtbMW0bWzMxbWV4ZXJjaXNlc1wwMi13cml0ZS15b3VyLWZpcnN0LXByb21wdC1cdGVzdC5weRtbMG06NDE6IA0KXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXw0KG1sxbRtbMzFtdXRpbHNccHJvbXB0LnB5G1swbTozMTogaW4gY3JlYXRlX3Byb21wdA0KICAgIGNoYXRfY29tcGxldGlvbj0gIGNsaWVudC5jaGF0LmNvbXBsZXRpb25zLmNyZWF0ZSgNChtbMW0bWzMxbS4uXC4uXC4uXC4uXC4uXEFwcERhdGFcTG9jYWxcUHJvZ3JhbXNcUHl0aG9uXFB5dGhvbjMxMVxMaWJcc2l0ZS1wYWNrYWdlc1xncm9xXHJlc291cmNlc1xjaGF0XGNvbXBsZXRpb25zLnB5G1swbToyODM6IGluIGNyZWF0ZQ0KICAgIHJldHVybiBzZWxmLl9wb3N0KA0KG1sxbRtbMzFtLi5cLi5cLi5cLi5cLi5cQXBwRGF0YVxMb2NhbFxQcm9ncmFtc1xQeXRob25cUHl0aG9uMzExXExpYlxzaXRlLXBhY2thZ2VzXGdyb3FcX2Jhc2VfY2xpZW50LnB5G1swbToxMjI1OiBpbiBwb3N0DQogICAgcmV0dXJuIGNhc3QoUmVzcG9uc2VULCBzZWxmLnJlcXVlc3QoY2FzdF90bywgb3B0cywgc3RyZWFtPXN0cmVhbSwgc3RyZWFtX2Nscz1zdHJlYW1fY2xzKSkNChtbMW0bWzMxbS4uXC4uXC4uXC4uXC4uXEFwcERhdGFcTG9jYWxcUHJvZ3JhbXNcUHl0aG9uXFB5dGhvbjMxMVxMaWJcc2l0ZS1wYWNrYWdlc1xncm9xXF9iYXNlX2NsaWVudC5weRtbMG06OTIwOiBpbiByZXF1ZXN0DQogICAgcmV0dXJuIHNlbGYuX3JlcXVlc3QoDQobWzFtG1szMW0uLlwuLlwuLlwuLlwuLlxBcHBEYXRhXExvY2FsXFByb2dyYW1zXFB5dGhvblxQeXRob24zMTFcTGliXHNpdGUtcGFja2FnZXNcZ3JvcVxfYmFzZV9jbGllbnQucHkbWzBtOjk3NTogaW4gX3JlcXVlc3QNCiAgICByZXR1cm4gc2VsZi5fcmV0cnlfcmVxdWVzdCgNChtbMW0bWzMxbS4uXC4uXC4uXC4uXC4uXEFwcERhdGFcTG9jYWxcUHJvZ3JhbXNcUHl0aG9uXFB5dGhvbjMxMVxMaWJcc2l0ZS1wYWNrYWdlc1xncm9xXF9iYXNlX2NsaWVudC5weRtbMG06MTA1MTogaW4gX3JldHJ5X3JlcXVlc3QNCiAgICByZXR1cm4gc2VsZi5fcmVxdWVzdCgNChtbMW0bWzMxbS4uXC4uXC4uXC4uXC4uXEFwcERhdGFcTG9jYWxcUHJvZ3JhbXNcUHl0aG9uXFB5dGhvbjMxMVxMaWJcc2l0ZS1wYWNrYWdlc1xncm9xXF9iYXNlX2NsaWVudC5weRtbMG06OTc1OiBpbiBfcmVxdWVzdA0KICAgIHJldHVybiBzZWxmLl9yZXRyeV9yZXF1ZXN0KA0KG1sxbRtbMzFtLi5cLi5cLi5cLi5cLi5cQXBwRGF0YVxMb2NhbFxQcm9ncmFtc1xQeXRob25cUHl0aG9uMzExXExpYlxzaXRlLXBhY2thZ2VzXGdyb3FcX2Jhc2VfY2xpZW50LnB5G1swbToxMDUxOiBpbiBfcmV0cnlfcmVxdWVzdA0KICAgIHJldHVybiBzZWxmLl9yZXF1ZXN0KA0KXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXyBfIF8gXw0KDQpzZWxmID0gPGdyb3EuR3JvcSBvYmplY3QgYXQgMHgwMDAwMDIyQ0ZFMjMxMTkwPg0KDQogICAgZGVmIF9yZXF1ZXN0KA0KICAgICAgICBzZWxmLA0KICAgICAgICAqLA0KICAgICAgICBjYXN0X3RvOiBUeXBlW1Jlc3BvbnNlVF0sDQogICAgICAgIG9wdGlvbnM6IEZpbmFsUmVxdWVzdE9wdGlvbnMsDQogICAgICAgIHJlbWFpbmluZ19yZXRyaWVzOiBpbnQgfCBOb25lLA0KICAgICAgICBzdHJlYW06IGJvb2wsDQogICAgICAgIHN0cmVhbV9jbHM6IHR5cGVbX1N0cmVhbVRdIHwgTm9uZSwNCiAgICApIC0+IFJlc3BvbnNlVCB8IF9TdHJlYW1UOg0KICAgICAgICBjYXN0X3RvID0gc2VsZi5fbWF5YmVfb3ZlcnJpZGVfY2FzdF90byhjYXN0X3RvLCBvcHRpb25zKQ0KICAgICAgICBzZWxmLl9wcmVwYXJlX29wdGlvbnMob3B0aW9ucykNCiAgICANCiAgICAgICAgcmV0cmllcyA9IHNlbGYuX3JlbWFpbmluZ19yZXRyaWVzKHJlbWFpbmluZ19yZXRyaWVzLCBvcHRpb25zKQ0KICAgICAgICByZXF1ZXN0ID0gc2VsZi5fYnVpbGRfcmVxdWVzdChvcHRpb25zKQ0KICAgICAgICBzZWxmLl9wcmVwYXJlX3JlcXVlc3QocmVxdWVzdCkNCiAgICANCiAgICAgICAga3dhcmdzOiBIdHRweFNlbmRBcmdzID0ge30NCiAgICAgICAgaWYgc2VsZi5jdXN0b21fYXV0aCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGt3YXJnc1siYXV0aCJdID0gc2VsZi5jdXN0b21fYXV0aA0KICAgIA0KICAgICAgICBsb2cuZGVidWcoIlNlbmRpbmcgSFRUUCBSZXF1ZXN0OiAlcyAlcyIsIHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCkNCiAgICANCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcmVzcG9uc2UgPSBzZWxmLl9jbGllbnQuc2VuZCgNCiAgICAgICAgICAgICAgICByZXF1ZXN0LA0KICAgICAgICAgICAgICAgIHN0cmVhbT1zdHJlYW0gb3Igc2VsZi5fc2hvdWxkX3N0cmVhbV9yZXNwb25zZV9ib2R5KHJlcXVlc3Q9cmVxdWVzdCksDQogICAgICAgICAgICAgICAgKiprd2FyZ3MsDQogICAgICAgICAgICApDQogICAgICAgIGV4Y2VwdCBodHRweC5UaW1lb3V0RXhjZXB0aW9uIGFzIGVycjoNCiAgICAgICAgICAgIGxvZy5kZWJ1ZygiRW5jb3VudGVyZWQgaHR0cHguVGltZW91dEV4Y2VwdGlvbiIsIGV4Y19pbmZvPVRydWUpDQogICAgDQogICAgICAgICAgICBpZiByZXRyaWVzID4gMDoNCiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fcmV0cnlfcmVxdWVzdCgNCiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucywNCiAgICAgICAgICAgICAgICAgICAgY2FzdF90bywNCiAgICAgICAgICAgICAgICAgICAgcmV0cmllcywNCiAgICAgICAgICAgICAgICAgICAgc3RyZWFtPXN0cmVhbSwNCiAgICAgICAgICAgICAgICAgICAgc3RyZWFtX2Nscz1zdHJlYW1fY2xzLA0KICAgICAgICAgICAgICAgICAgICByZXNwb25zZV9oZWFkZXJzPU5vbmUsDQogICAgICAgICAgICAgICAgKQ0KICAgIA0KICAgICAgICAgICAgbG9nLmRlYnVnKCJSYWlzaW5nIHRpbWVvdXQgZXJyb3IiKQ0KICAgICAgICAgICAgcmFpc2UgQVBJVGltZW91dEVycm9yKHJlcXVlc3Q9cmVxdWVzdCkgZnJvbSBlcnINCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlcnI6DQogICAgICAgICAgICBsb2cuZGVidWcoIkVuY291bnRlcmVkIEV4Y2VwdGlvbiIsIGV4Y19pbmZvPVRydWUpDQogICAgDQogICAgICAgICAgICBpZiByZXRyaWVzID4gMDoNCiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fcmV0cnlfcmVxdWVzdCgNCiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucywNCiAgICAgICAgICAgICAgICAgICAgY2FzdF90bywNCiAgICAgICAgICAgICAgICAgICAgcmV0cmllcywNCiAgICAgICAgICAgICAgICAgICAgc3RyZWFtPXN0cmVhbSwNCiAgICAgICAgICAgICAgICAgICAgc3RyZWFtX2Nscz1zdHJlYW1fY2xzLA0KICAgICAgICAgICAgICAgICAgICByZXNwb25zZV9oZWFkZXJzPU5vbmUsDQogICAgICAgICAgICAgICAgKQ0KICAgIA0KICAgICAgICAgICAgbG9nLmRlYnVnKCJSYWlzaW5nIGNvbm5lY3Rpb24gZXJyb3IiKQ0KPiAgICAgICAgICAgcmFpc2UgQVBJQ29ubmVjdGlvbkVycm9yKHJlcXVlc3Q9cmVxdWVzdCkgZnJvbSBlcnINChtbMW0bWzMxbUUgICAgICAgICAgIGdyb3EuQVBJQ29ubmVjdGlvbkVycm9yOiBDb25uZWN0aW9uIGVycm9yLhtbMG0NCg0KG1sxbRtbMzFtLi5cLi5cLi5cLi5cLi5cQXBwRGF0YVxMb2NhbFxQcm9ncmFtc1xQeXRob25cUHl0aG9uMzExXExpYlxzaXRlLXBhY2thZ2VzXGdyb3FcX2Jhc2VfY2xpZW50LnB5G1swbTo5ODU6IEFQSUNvbm5lY3Rpb25FcnJvcg0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0NChtbMzFtRkFJTEVEG1swbSBleGVyY2lzZXMvMDItd3JpdGUteW91ci1maXJzdC1wcm9tcHQtL3Rlc3QucHk6OhtbMW10ZXN0X3Byb21wdBtbMG0gLSBncm9xLkFQSUNvbm5lY3Rpb25FcnJvcjogQ29ubmVjdGlvbiBlcnJvci4NChtbMzFtPT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMxbRtbMW0xIGZhaWxlZBtbMG0sIBtbMzJtMiBwYXNzZWQbWzBtG1szMW0gaW4gOS4yMXMbWzBtG1szMW0gPT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0NCiwKCiAgIAogICAgICAgICAgG1szMW1Zb3VyIGNvZGUgbXVzdCB0byBjb21wbHkgd2l0aCB0aGUgZm9sbG93aW5nIHRlc3RzOhtbMzltIAoKICAgICAbWzMxbRtbMW14IChmYWlsKRtbMjJtG1szOW0gMC4gG1szN21UaGUgcHJvbXB0IE1VU1QgaW5jbHVkZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hhcmFjdGVycywgdGhlIHNjZW5lLCBhbmQgYXQgbGVhc3Qgb25lIG1vcmUgZWxlbWVudC4bWzM5bSAKCg==","exit_code":1},{"starting_at":1718831133535,"ended_at":1718831138295,"stdout":"","stderr":"","exit_code":1},{"starting_at":1718831143804,"ended_at":1718831148746,"stdout":"","stderr":"","exit_code":1},{"starting_at":1718831171068,"ended_at":1718831178900,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtDQpwbGF0Zm9ybSB3aW4zMiAtLSBQeXRob24gMy4xMS4zLCBweXRlc3QtOC4yLjIsIHBsdWdneS0xLjUuMA0Kcm9vdGRpcjogQzpcVXNlcnNcTEVHSU9OXFByb2plY3RzXGpvYnNcNGdlZWtzXHR1dG9yaWFsc1xwcm9tcHQtZW5nDQpwbHVnaW5zOiBhbnlpby00LjQuMCwgdGVzdGRveC0zLjEuMA0KY29sbGVjdGVkIDMgaXRlbXMNCg0KZXhlcmNpc2VzXDAyLXdyaXRlLXlvdXItZmlyc3QtcHJvbXB0LVx0ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgWzEwMCVdG1swbQ0KDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQobWzMxbRtbMW1fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcm9tcHQgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQ0KDQogICAgQHB5dGVzdC5tYXJrLml0KCJUaGUgcHJvbXB0IE1VU1QgaW5jbHVkZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hhcmFjdGVycywgdGhlIHNjZW5lLCBhbmQgYXQgbGVhc3Qgb25lIG1vcmUgZWxlbWVudC4iKQ0KICAgIGRlZiB0ZXN0X3Byb21wdCgpOg0KICAgICAgICBQUk9NUFQgPSBvcGVuKHBhdGgsICJyIikucmVhZCgpDQogICAgICAgIHJlc3VsdCA9IGNyZWF0ZV9wcm9tcHQoZ2V0X3Rlc3Rlcl9wcm9tcHQoUFJPTVBUX1JFUVVJUkVNRU5UUyksIFBST01QVCkNCiAgICANCiAgICAgICAgc2F2ZV9yZXBvcnQocmVzdWx0LCBjdXJyZW50X2RpcikNCiAgICAgICAgIyBpZiAiQkFEX1BST01QVCIgaW4gcmVzdWx0Og0KICAgICAgICAjIGVsc2U6DQogICAgICAgICMgICAgIGRlbGV0ZV9yZXBvcnQoY3VycmVudF9kaXIpDQogICAgDQo+ICAgICAgIGFzc2VydCAiR09PRF9QUk9NUFQiIGluIHJlc3VsdA0KXHgxYlsxbVx4MWJbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICdHT09EX1BST01QVCcgaW4gJyMgQkFEX1BST01QVCBcVTAwMDFmNmE5XFxuXFxuWW91ciBmZWVkYmFjayBzdW1tYXJ5OlxcblxcbnwgUmVxdWlyZW1lbnQgfCBDb3JyZWN0PyB8IEV4cGxhbmF0aW9uIHxcXG58IC0tLSB8IC0tLSB8IC0tLSB8XFxufCBJbmZvcm1hdC4uLiB5b3VyIHByb21wdCB0byBpbmNsdWRlIG1vcmUgZGV0YWlscyBhYm91dCB0aGUgc2NlbmUgYW5kIGF0IGxlYXN0IG9uZSBtb3JlIGVsZW1lbnQgdG8gbWFrZSB0aGUgc3RvcnkgbW9yZSBpbnRlcmVzdGluZyEnXHgxYlswbQ0KDQobWzFtG1szMW1leGVyY2lzZXNcMDItd3JpdGUteW91ci1maXJzdC1wcm9tcHQtXHRlc3QucHkbWzBtOjQ4OiBBc3NlcnRpb25FcnJvcg0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0NClx4MWJbMzFtRkFJTEVEXHgxYlswbSBleGVyY2lzZXMvMDItd3JpdGUteW91ci1maXJzdC1wcm9tcHQtL3Rlc3QucHk6Olx4MWJbMW10ZXN0X3Byb21wdFx4MWJbMG0gLSBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICdHT09EX1BST01QVCcgaW4gJyMgQkFEX1BST01QVCBcVTAwMDFmNmE5XFxuXFxuWW91ciBmZWVkYmFjayBzLi4uDQobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDYuOTFzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtDQo=","stderr":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtDQpwbGF0Zm9ybSB3aW4zMiAtLSBQeXRob24gMy4xMS4zLCBweXRlc3QtOC4yLjIsIHBsdWdneS0xLjUuMA0Kcm9vdGRpcjogQzpcVXNlcnNcTEVHSU9OXFByb2plY3RzXGpvYnNcNGdlZWtzXHR1dG9yaWFsc1xwcm9tcHQtZW5nDQpwbHVnaW5zOiBhbnlpby00LjQuMCwgdGVzdGRveC0zLjEuMA0KY29sbGVjdGVkIDMgaXRlbXMNCg0KZXhlcmNpc2VzXDAyLXdyaXRlLXlvdXItZmlyc3QtcHJvbXB0LVx0ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMW1GG1swbRtbMzFtICAgICAgICAgICAgICAgICAgICAgICAgWzEwMCVdG1swbQ0KDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEZBSUxVUkVTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQobWzMxbRtbMW1fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gdGVzdF9wcm9tcHQgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fG1swbQ0KDQogICAgQHB5dGVzdC5tYXJrLml0KCJUaGUgcHJvbXB0IE1VU1QgaW5jbHVkZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hhcmFjdGVycywgdGhlIHNjZW5lLCBhbmQgYXQgbGVhc3Qgb25lIG1vcmUgZWxlbWVudC4iKQ0KICAgIGRlZiB0ZXN0X3Byb21wdCgpOg0KICAgICAgICBQUk9NUFQgPSBvcGVuKHBhdGgsICJyIikucmVhZCgpDQogICAgICAgIHJlc3VsdCA9IGNyZWF0ZV9wcm9tcHQoZ2V0X3Rlc3Rlcl9wcm9tcHQoUFJPTVBUX1JFUVVJUkVNRU5UUyksIFBST01QVCkNCiAgICANCiAgICAgICAgc2F2ZV9yZXBvcnQocmVzdWx0LCBjdXJyZW50X2RpcikNCiAgICAgICAgIyBpZiAiQkFEX1BST01QVCIgaW4gcmVzdWx0Og0KICAgICAgICAjIGVsc2U6DQogICAgICAgICMgICAgIGRlbGV0ZV9yZXBvcnQoY3VycmVudF9kaXIpDQogICAgDQo+ICAgICAgIGFzc2VydCAiR09PRF9QUk9NUFQiIGluIHJlc3VsdA0KXHgxYlsxbVx4MWJbMzFtRSAgICAgICBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICdHT09EX1BST01QVCcgaW4gJyMgQkFEX1BST01QVCBcVTAwMDFmNmE5XFxuXFxuWW91ciBmZWVkYmFjayBzdW1tYXJ5OlxcblxcbnwgUmVxdWlyZW1lbnQgfCBDb3JyZWN0PyB8IEV4cGxhbmF0aW9uIHxcXG58IC0tLSB8IC0tLSB8IC0tLSB8XFxufCBJbmZvcm1hdC4uLiB5b3VyIHByb21wdCB0byBpbmNsdWRlIG1vcmUgZGV0YWlscyBhYm91dCB0aGUgc2NlbmUgYW5kIGF0IGxlYXN0IG9uZSBtb3JlIGVsZW1lbnQgdG8gbWFrZSB0aGUgc3RvcnkgbW9yZSBpbnRlcmVzdGluZyEnXHgxYlswbQ0KDQobWzFtG1szMW1leGVyY2lzZXNcMDItd3JpdGUteW91ci1maXJzdC1wcm9tcHQtXHRlc3QucHkbWzBtOjQ4OiBBc3NlcnRpb25FcnJvcg0KG1szNm0bWzFtPT09PT09PT09PT09PT09PT09PT09PT09PT09IHNob3J0IHRlc3Qgc3VtbWFyeSBpbmZvID09PT09PT09PT09PT09PT09PT09PT09PT09PRtbMG0NClx4MWJbMzFtRkFJTEVEXHgxYlswbSBleGVyY2lzZXMvMDItd3JpdGUteW91ci1maXJzdC1wcm9tcHQtL3Rlc3QucHk6Olx4MWJbMW10ZXN0X3Byb21wdFx4MWJbMG0gLSBBc3NlcnRpb25FcnJvcjogYXNzZXJ0ICdHT09EX1BST01QVCcgaW4gJyMgQkFEX1BST01QVCBcVTAwMDFmNmE5XFxuXFxuWW91ciBmZWVkYmFjayBzLi4uDQobWzMxbT09PT09PT09PT09PT09PT09PT09PT09PT0gG1szMW0bWzFtMSBmYWlsZWQbWzBtLCAbWzMybTIgcGFzc2VkG1swbRtbMzFtIGluIDYuOTFzG1swbRtbMzFtID09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtDQosCgogICAKICAgICAgICAgIBtbMzFtWW91ciBjb2RlIG11c3QgdG8gY29tcGx5IHdpdGggdGhlIGZvbGxvd2luZyB0ZXN0czobWzM5bSAKCiAgICAgG1szMW0bWzFteCAoZmFpbCkbWzIybRtbMzltIDAuIBtbMzdtVGhlIHByb21wdCBNVVNUIGluY2x1ZGUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNoYXJhY3RlcnMsIHRoZSBzY2VuZSwgYW5kIGF0IGxlYXN0IG9uZSBtb3JlIGVsZW1lbnQuG1szOW0gCgo=","exit_code":1},{"starting_at":1718831208887,"ended_at":1718831211574,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtDQpwbGF0Zm9ybSB3aW4zMiAtLSBQeXRob24gMy4xMS4zLCBweXRlc3QtOC4yLjIsIHBsdWdneS0xLjUuMA0Kcm9vdGRpcjogQzpcVXNlcnNcTEVHSU9OXFByb2plY3RzXGpvYnNcNGdlZWtzXHR1dG9yaWFsc1xwcm9tcHQtZW5nDQpwbHVnaW5zOiBhbnlpby00LjQuMCwgdGVzdGRveC0zLjEuMA0KY29sbGVjdGVkIDMgaXRlbXMNCg0KZXhlcmNpc2VzXDAyLXdyaXRlLXlvdXItZmlyc3QtcHJvbXB0LVx0ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgICAgWzEwMCVdG1swbQ0KDQobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW0zIHBhc3NlZBtbMG0bWzMybSBpbiAxLjgwcxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0bWzBtDQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1718830897921,"completed_at":1718831211574},{"slug":"02.1-importance-of-detailed-instructions","position":5,"files":[{"path":"exercises\\02.1-importance-of-detailed-instructions/prompt.txt","name":"prompt.txt","hidden":false},{"path":"exercises\\02.1-importance-of-detailed-instructions/README.es.md","name":"README.es.md","hidden":true},{"path":"exercises\\02.1-importance-of-detailed-instructions/README.md","name":"README.md","hidden":true},{"path":"exercises\\02.1-importance-of-detailed-instructions/test.py","name":"test.py","hidden":true},{"path":"exercises\\02.1-importance-of-detailed-instructions/__pycache__","name":"__pycache__","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"03-acting-as-an-expert","position":6,"files":[{"path":"exercises\\03-acting-as-an-expert/prompt.txt","name":"prompt.txt","hidden":false},{"path":"exercises\\03-acting-as-an-expert/README.es.md","name":"README.es.md","hidden":true},{"path":"exercises\\03-acting-as-an-expert/README.md","name":"README.md","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":false},{"slug":"03.1-patient-story","position":7,"files":[{"path":"exercises\\03.1-patient-story/prompt.txt","name":"prompt.txt","hidden":false},{"path":"exercises\\03.1-patient-story/README.es.md","name":"README.es.md","hidden":true},{"path":"exercises\\03.1-patient-story/README.md","name":"README.md","hidden":true},{"path":"exercises\\03.1-patient-story/test.py","name":"test.py","hidden":true},{"path":"exercises\\03.1-patient-story/__pycache__","name":"__pycache__","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"04-delimiters-and-how-to-avoid-missunderstanding","position":8,"files":[{"path":"exercises\\04-delimiters-and-how-to-avoid-missunderstanding/README.es.md","name":"README.es.md","hidden":true},{"path":"exercises\\04-delimiters-and-how-to-avoid-missunderstanding/README.md","name":"README.md","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":false},{"slug":"04.1-fix-the-failing-translation-prompt","position":9,"files":[{"path":"exercises\\04.1-fix-the-failing-translation-prompt/prompt.txt","name":"prompt.txt","hidden":false},{"path":"exercises\\04.1-fix-the-failing-translation-prompt/README.es.md","name":"README.es.md","hidden":true},{"path":"exercises\\04.1-fix-the-failing-translation-prompt/README.md","name":"README.md","hidden":true},{"path":"exercises\\04.1-fix-the-failing-translation-prompt/test.py","name":"test.py","hidden":true},{"path":"exercises\\04.1-fix-the-failing-translation-prompt/__pycache__","name":"__pycache__","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"05-some-shots-prompts","position":10,"files":[{"path":"exercises\\05-some-shots-prompts/README.es.md","name":"README.es.md","hidden":true},{"path":"exercises\\05-some-shots-prompts/README.md","name":"README.md","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":false},{"slug":"05.1-obtaining-a-correct-list-of-products","position":11,"files":[{"path":"exercises\\05.1-obtaining-a-correct-list-of-products/prompt.txt","name":"prompt.txt","hidden":false},{"path":"exercises\\05.1-obtaining-a-correct-list-of-products/README.es.md","name":"README.es.md","hidden":true},{"path":"exercises\\05.1-obtaining-a-correct-list-of-products/README.md","name":"README.md","hidden":true},{"path":"exercises\\05.1-obtaining-a-correct-list-of-products/solution.hide.txt","name":"solution.hide.txt","hidden":true},{"path":"exercises\\05.1-obtaining-a-correct-list-of-products/test.py","name":"test.py","hidden":true},{"path":"exercises\\05.1-obtaining-a-correct-list-of-products/__pycache__","name":"__pycache__","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true},{"slug":"06-what-is-context-in-prompting","position":12,"files":[{"path":"exercises\\06-what-is-context-in-prompting/README.es.md","name":"README.es.md","hidden":true},{"path":"exercises\\06-what-is-context-in-prompting/README.md","name":"README.md","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":false},{"slug":"06.1-google-algorithm-leak","position":13,"files":[{"path":"exercises\\06.1-google-algorithm-leak/prompt.txt","name":"prompt.txt","hidden":false},{"path":"exercises\\06.1-google-algorithm-leak/README.es.md","name":"README.es.md","hidden":true},{"path":"exercises\\06.1-google-algorithm-leak/README.md","name":"README.md","hidden":true},{"path":"exercises\\06.1-google-algorithm-leak/solution.hide.txt","name":"solution.hide.txt","hidden":true},{"path":"exercises\\06.1-google-algorithm-leak/test.py","name":"test.py","hidden":true},{"path":"exercises\\06.1-google-algorithm-leak/__pycache__","name":"__pycache__","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true}],"workout_session":[{"started_at":1718809424147}],"last_interaction_at":1718831211574}